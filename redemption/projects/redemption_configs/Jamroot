REDEMPTION_CONFIG_PATH ?= . ;
REDEMPTION_PUBLIC_PATH ?= ../.. ;
REDEMPTION_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/include ;

include ../../jam/redemption-config.jam ;
include ../../jam/cxxflags.jam ;
include ../../jam/defines.jam ;
include ../../jam/sanitizer.jam ;

project configs
    : requirements
    <include>$(REDEMPTION_CONFIG_PATH)/src
    <include>$(REDEMPTION_CONFIG_PATH)/autogen/include
    <include>$(REDEMPTION_CONFIG_PATH)/configs_specs
    <include>$(REDEMPTION_INCLUDE_PATH)
    <include>$(REDEMPTION_SRC_PATH)
    <include>$(SYSTEM_SRC_PATH)

    <rtti>off
    <cxx-stack-protector>off

    $(REDEMPTION_CXXFLAGS)
    <toolset>clang:<cxxflags>-Wno-class-varargs

   : default-build debug
;

constant AUTOGEN_SPEC_DIR : autogen/spec ;
constant AUTOGEN_INC_DIR : autogen/include/configs/autogen ;
constant FILEGEN_ENUM : $(AUTOGEN_INC_DIR)/enums.hpp ;
constant FILEGEN_CONF : $(AUTOGEN_INC_DIR)/variables_configuration.hpp ;
constant FILEGEN_VERBOSE_DESC : autogen/src/include/debug_verbose_description.hpp ;

actions generate_cpp_enumeration
{
    $(>) $(AUTOGEN_INC_DIR)
}

actions generate_config_spec
{
    $(>) || return 1

    # auto gen RDP connection policy
    echo -n '//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

R"xxxyyyzzz(' > autogen/include/configs/autogen/rdp_cp_spec.hpp
    cat autogen/spec/rdp.spec >> autogen/include/configs/autogen/rdp_cp_spec.hpp
    echo ')xxxyyyzzz"' >> autogen/include/configs/autogen/rdp_cp_spec.hpp

    # auto gen VNC connection policy
    echo -n '//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

R"xxxyyyzzz(' > autogen/include/configs/autogen/vnc_cp_spec.hpp
    cat autogen/spec/vnc.spec >> autogen/include/configs/autogen/vnc_cp_spec.hpp
    echo ')xxxyyyzzz"' >> autogen/include/configs/autogen/vnc_cp_spec.hpp

    # auto gen connection policy mapping for sesman
    echo -n '//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

R"xxxyyyzzz(' > autogen/include/configs/autogen/cp_mapping.hpp
    cat ../../tools/sesman/sesmanworker/sesmanconnpolicyspec.py >> autogen/include/configs/autogen/cp_mapping.hpp
    echo ')xxxyyyzzz"' >> autogen/include/configs/autogen/cp_mapping.hpp
}

actions generate_debug_verbose_description
{
    ./extract_verbose.sh > $(<)
}

rule create_generator ( name : file : libraries * : requirements * )
{
    make $(file) : make_$(name) : @generate_$(name) : <location>. ;
    alias generate_$(name) : $(file) ;
    obj src/configs/write_$(name).cpp.o : src/configs/write_$(name).cpp :
        $(requirements)
        <cxxflags>-std=c++2a
        # bug of clang
        # zstring_view.hpp:187:24: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
        # return lhs.to_sv() >= std::string_view(rhs);
        #                    ^~
        #                    nullptr
        <toolset>clang:<cxxflags>-Wno-zero-as-null-pointer-constant
    ;
    exe make_$(name) : src/configs/write_$(name).cpp.o : $(libraries) ;
}

obj keylayouts : $(REDEMPTION_SRC_PATH)/keyboard/keylayouts.cpp : ;

create_generator debug_verbose_description : $(FILEGEN_VERBOSE_DESC) ;
create_generator cpp_enumeration : $(FILEGEN_ENUM) : <library>log_test.o ;
create_generator config_spec : $(FILEGEN_CONF)
    : <library>keylayouts <library>log_test.o
    : <include>autogen/src <implicit-dependency>generate_debug_verbose_description
    ;

alias generate :
    generate_cpp_enumeration
    generate_config_spec
;

include ../../jam/testing-coverage.jam ;

local obj_list = ;
rule add_obj ( target : src : requirements * )
{
    obj $(target) : $(src) : $(requirements) ;
    obj_list += $(target) ;
}

add_obj error.o : $(REDEMPTION_SRC_PATH)/core/error.cpp : <define>NDEBUG ;
add_obj cfgloader.o : $(REDEMPTION_SRC_PATH)/utils/cfgloader.cpp ;
add_obj strutils.o : $(REDEMPTION_SRC_PATH)/utils/strutils.cpp ;
add_obj hex2buf.o : $(REDEMPTION_SRC_PATH)/utils/hexadecimal_string_to_buffer.cpp ;
add_obj fileutils.o : $(REDEMPTION_SRC_PATH)/utils/fileutils.cpp ;
add_obj hexdump.o : $(REDEMPTION_SRC_PATH)/utils/hexdump.cpp ;
add_obj app_path_test.o : $(REDEMPTION_SRC_PATH)/core/app_path.cpp :
    <conditional>@defines-for-test
    <define>SHARE_PATH='\"\"'
    <define>CFG_PATH='\"$(REDEMPTION_SYS_PATH)/etc/rdpproxy/\"'
;

add_obj config.o : redemption_src/configs/config.cpp
:
    <include>redemption_src
    <implicit-dependency>generate_config_spec
    <implicit-dependency>generate_cpp_enumeration
;

add_obj working_directory.o
:
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/working_directory.cpp
:
    <variant>debug:<define>RED_COMPILE_TYPE=debug
    <variant>release:<define>RED_COMPILE_TYPE=release
    <variant>san:<define>RED_COMPILE_TYPE=san
    $(CXXFLAGS_TEST)
;

rule test-run ( name )
{
    unit-test $(name) : tests/$(name).cpp generate_config_spec :
        $(TEST_DEPENDENCIES)
        <library>$(obj_list)
        # <cxxflags>-frtti
        <include>redemption_src
        <conditional>@defines-for-test
    ;
}

## Tests
## @{
test-run test_config ;
test-run test_parser ;
test-run test_config_assign ;
test-run test_include ;
## }
